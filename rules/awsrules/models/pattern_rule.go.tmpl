// This file generated by `tools/model-rule-gen/main.go`. DO NOT EDIT

package models

import (
	"fmt"
	"log"
	"regexp"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/wata727/tflint/issue"
	"github.com/wata727/tflint/tflint"
)

// {{ .RuleNameCC }}Rule checks the pattern is valid
type {{ .RuleNameCC }}Rule struct {
	resourceType  string
	attributeName string
	max           int
	min           int
	pattern       *regexp.Regexp
}

// New{{ .RuleNameCC }}Rule returns new rule with default attributes
func New{{ .RuleNameCC }}Rule() *{{ .RuleNameCC }}Rule {
	return &{{ .RuleNameCC }}Rule{
		resourceType:  "{{ .ResourceType }}",
		attributeName: "{{ .AttributeName }}",
		max:           {{ .Max }},
		min:           {{ .Min }},
		pattern:       regexp.MustCompile(`^{{ .Pattern }}$`),
	}
}

// Name returns the rule name
func (r *{{ .RuleNameCC }}Rule) Name() string {
	return "{{ .RuleName }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ .RuleNameCC }}Rule) Enabled() bool {
	return true
}

// Type returns the rule severity
func (r *{{ .RuleNameCC }}Rule) Type() string {
	return issue.ERROR
}

// Link returns the rule reference link
func (r *{{ .RuleNameCC }}Rule) Link() string {
	return ""
}

// Check checks the pattern is valid
func (r *{{ .RuleNameCC }}Rule) Check(runner *tflint.Runner) error {
	log.Printf("[INFO] Check `%s` rule for `%s` runner", r.Name(), runner.TFConfigPath())

	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val)

		return runner.EnsureNoError(err, func() error {
			if len(val) > r.max {
				runner.EmitIssue(
					r,
					fmt.Sprintf(`"%s" must be %d characters or less`, val, r.max),
					attribute.Expr.Range(),
				)
			}

			if len(val) < r.min {
				runner.EmitIssue(
					r,
					fmt.Sprintf(`"%s" must be %d characters or higher`, val, r.min),
					attribute.Expr.Range(),
				)
			}

			if !r.pattern.MatchString(val) {
				runner.EmitIssue(
					r,
					fmt.Sprintf(`"%s" does not match valid pattern ^{{ .Pattern }}$`, val),
					attribute.Expr.Range(),
				)
			}
			return nil
		})
	})
}
